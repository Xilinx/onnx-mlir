// RUN: onnx-mlir-opt  --shape-inference --canonicalize="test-convergence=true" --shape-inference --cse %s | FileCheck %s

module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "onnx-mlir.symbol-postfix" = "onnxmodel"} {
  func.func @main_graph(%arg0: tensor<1x180x320x3xf32> {onnx.name = "src"}, %arg1: tensor<1x90x160x16xf32> {onnx.name = "r1i"}, %arg2: tensor<1x45x80x20xf32> {onnx.name = "r2i"}, %arg3: tensor<1x23x40x40xf32> {onnx.name = "r3i"}, %arg4: tensor<1x12x20x64xf32> {onnx.name = "r4i"}) -> (tensor<1x3x180x320xf32> {onnx.name = "fgr"}, tensor<1x3x180x320xf32> {onnx.name = "pha"}, tensor<1x3x180x320xf32> {onnx.name = "r1o"}, tensor<1x16x90x160xf32>{onnx.name = "r2o"}, tensor<1x16x90x160xf32> {onnx.name = "r3o"}, tensor<1x16x90x160xf32>{onnx.name = "r4o"}) {
    %0 = onnx.Constant dense<[[[-4.850000e-01]], [[-4.560000e-01]], [[-4.060000e-01]]]> : tensor<3x1x1xf32>
    %58 = onnx.Constant dense<"0x0BEEE4BDFC5B33BD57F3233E8B888BBE569F02BD2C7CA53E584D0CBE365FB2BC0742143EE1C6A1BE8AEB90BD2F8FBD3E69DE1EBF11BEBEBD24FF313FFD5AA7BEE5793ABDF424CE3E359E5FBDF2474BBCA410483D4DA79FBD3EA3D1BBA4ACBB3DBA76C0BA4046F1BB7D4FFB3CD7502C3D96CE4EBD824ED4BB7070A4BDCE4187BE02A5B0BC1E3CE239106D8C3A7FF8E43CE11813BD1A7347BE55C2D6BDD2D405BEB42DA5BEA37B39BEBB1FCE3CC579B63BEEABAF3C0C05F2BC099C57BCFB71CF3C81CA41BDE1CD8DBEAF4F8B3C1AFD36BDB13249BD279D4EBC51D39A3F4E06494057ED493F19429FBFF9CDB4BFF58A4EBD3BBF9C3AE1C5CCBF60B259BFA77F3C4016AFD44034222E40810E18C08BBF27C021AB1BBFF32C20BF99686AC01F0E1CC0E1B1C93E04839F3FB8A7333E56BFFBBED76A3DBFF650C73DC9151A3E13D2DBBECD38B3BEFFA82E3D127B66BDD36B45BC944D88BD759D2D3F825CA7BC2037503D56EF3DBD45A8B1BD662D7D3E86B64DBC72E22B3E5874673DA7DB143FDFEA0D3EE4C3863E085A0D3E2449BD3D8234BD3C46BD26BDC30D30BC1007F1BC5067E63EF6C6B43B668C013DB6B5B5BD506AFFBC95390A3DB408E0BD5B00703E9996D0BC13A7563E319231BE0000243D915B063E5A3C12BF79A940BD22EA7FBD4FFA953EAC5D75BD0754A33EB861B8BE653CDFBC8426563EAD0A23BF3F18D83BC0B68FBD7EF1223DFF5E0E3DD31DD43D90C63FBE5F37963D8C0C873D8C338CBEBB1A80BC258C32BF71ED85BF1A55283D38245A3FD803623F75DC1ABD2FCBFDBD595E2C3EE5E1B33C7116BDBF9A2B1AC0D0B4F63D16FDF23F4E24FC3FAAA2D9BCB0411EBE3650933DE2E16BBCF25A93BE0A17F8BE188E383D19F8BC3EDA33C73E1161833C67615CBD5462263D6044B53C12A4453CDDF80FBC1081883CBEEEEE3CBF3A4C3C5CF1553CE4C8A73C9CA0253CD8C5ACBDB0086DBE01CED5BD82B027BEA225BABE027F56BE1544C0BCF9E0CDBDCFF562BDE2A3923DAD045C3E665FF73DC579103E14DCB13EEA7E463EDC8C363C2AB1A13D01E8433DC675753DA56527BD30CE2C3E11E6D4BD14F946BE4296BBBF920700BD2236B23F8BB1C53E23F45C3D3B3BDFBD8242293E5D2EC9BDEC8FFBBE396B5AC01B217AB91E5F4240329D4A3F8210C73B962518BD1585BEBBE214EBBD3BB149BD907018BFBB89833C4F0D1B3FC9DCB73DD75CB33C523B9D3C2EF0D6BB13A1BBBDED5B6EBE18363EBE264087BEA85B07BFCE5EA0BE8F6F423DE211C53C157B383CE2C40F3DF363B83DBB4ADA3DD739263DE233113EBBBCC73D8CAF43BD74A187BD3B3F123B63E7033DC6011C3E88B1983D3EE96C3E9374C13E19F84E3E09FD91BF2548B33C8EDD8D3FBC7830C011F21E3FF5580940D231A0BFF19BCE3EC6A65A3F24934BC07120863E5D482D40904CBCC08D9F963F64FD9940243041C0301C3A3FF7141A40A69A12BF7C06E63CD9DDF43EAAA090BFA822AA3EE1E1523F649ECBBE8E60343E83F15C3EB9A692BA3E9A6B3C9EBBF33C8E34BFBB2F9CC2BCB947C23CA8128F3C932B4EBA5EA6DEBCA8D19A3CB62AD13C8C67AD3C52CAD63BE71870BC5C0F593CD82C053C075DEABB08923CBDD2C9193C1FCC593CE4438B3B597C4B3B1C2396BCA324CF3A5FCE5A3C539D56BBFBA837BD4F6280BFEEEC0840302A7ABFE365B7BF3C147440C76626C01DA8373D0254243F417426BF23A41AC058658E4008F4DDBFBC3628C01485FB40F485C5C0AA93F0BEC845354062B4FBBFE43D58BF03119B3F6C5C74BEEE4288BF769D10401D2B9FBF75C221BE6C2CF43E5B8AC8BEAFB9164067E202BE2B8C23C0EAE22A404975F3BB276365C0ACFF134085EAAC3F25631BC032BAD3BFD5373FBF4344E63F27B1D3BFC2B321BE19232A40175B7DBF1EDF803EC182243F4B22F8BEF4970E3EDCA9823F18A071BF3B65CDBD1F4FFB3FDE0EBFBF4ADB1ABF9938B53E26D12B3D344612BE02E5FD3C2E763E3ED4A8EBBE4A42133EB043493D72948BBEC1123C3E8AC1423E454C83BEF4153F3D99FED83EE7AA6BBFC9DC8D3E422E333ECBB5F6BE969CB23ED27DEF3CD1E9D9BC5395DABC51F5B13D96FE1BBED6068E3C40D1263B08F8A8BDA14BC53C9E0960BD7AE1803D8656143D2E4A7A3EC467033F3886933E422F603E43AEBE3E15EB223EDC86A43D3460A8BD675A0FBD54ED84BE24B7F7BE96598DBE0F1C8DBE132CE1BE8A236DBEFAEBA7BC65E3573C4720063BA52987BA4BF7093C47AA67BC7DF5913D75C7833D5D24A33DEA7A91BDA8C5E2BD7BE516BD060F7D3F25A5BD3F7B39D73DFCC57DBFD70194BFE7362EBE9A68B7BDE76840BE6713D9BDBDE31640E2BF5040C3BE9E3EB31F12C08F222DC04DE109BF4C9989BC1D85E3BD2389A4BCA14FA73E83C9093FD7EB673DA3ECADBE82FFD0BEF1FCA0BD"> : tensor<16x3x3x3xf32>
    %59 = onnx.Constant dense<[2.98861408, -1.22985208, 2.43826318, -3.98499513, 4.62797928, 2.54142761, 2.45345306, 2.64061832, 2.13576674, 2.30800247, -0.198341176, -0.427822977, -1.09159482, 4.85548782, 2.70597649, 2.6902504]> : tensor<16xf32>
    %164 = onnx.Constant dense<2> : tensor<1xi64>
    %165 = onnx.Constant dense<3.000000e+00> : tensor<f32>
    %166 = onnx.Constant dense<1.000000e+00> : tensor<f32>
    %167 = onnx.Constant dense<23> : tensor<1xi64>
    %168 = onnx.Constant dense<6.000000e+00> : tensor<f32>
    %169 = onnx.Constant dense<0.000000e+00> : tensor<f32>
    %170 = onnx.Constant dense<[[[2.290000e-01]], [[2.240000e-01]], [[2.250000e-01]]]> : tensor<3x1x1xf32>
    %171 = onnx.Constant dense<1> : tensor<1xi64>
    %172 = onnx.Constant dense<45> : tensor<1xi64>
    %173 = "onnx.Transpose"(%arg0) {onnx_node_name = "Transpose_0", perm = [0, 3, 1, 2]} : (tensor<1x180x320x3xf32>) -> tensor<1x3x180x320xf32>
    %174 = "onnx.Add"(%173, %0) {onnx_node_name = "Sub_6-Initializer_ortshared_1_3_3_1_token_113_24"} : (tensor<1x3x180x320xf32>, tensor<3x1x1xf32>) -> tensor<1x3x180x320xf32>
    %175 = "onnx.Div"(%174, %170) {onnx_node_name = "Div_8"} : (tensor<1x3x180x320xf32>, tensor<3x1x1xf32>) -> tensor<1x3x180x320xf32>
    %176 = "onnx.Conv"(%175, %58, %59) {auto_pad = "NOTSET", dilations = [1, 1], group = 1 : si64, kernel_shape = [3, 3], onnx_node_name = "Conv_9", pads = [1, 1, 1, 1], strides = [2, 2]} : (tensor<1x3x180x320xf32>, tensor<16x3x3x3xf32>, tensor<16xf32>) -> tensor<1x16x90x160xf32>
    %177 = "onnx.Add"(%176, %165) {onnx_node_name = "Add_11"} : (tensor<1x16x90x160xf32>, tensor<f32>) -> tensor<1x16x90x160xf32>
    %178 = "onnx.Clip"(%177, %169, %168) {onnx_node_name = "Clip_14_8"} : (tensor<1x16x90x160xf32>, tensor<f32>, tensor<f32>) -> tensor<1x16x90x160xf32>
    return %173, %175, %175, %176, %177, %178 : tensor<1x3x180x320xf32>, tensor<1x3x180x320xf32>, tensor<1x3x180x320xf32>, tensor<1x16x90x160xf32>, tensor<1x16x90x160xf32>, tensor<1x16x90x160xf32>
  }
  "onnx.EntryPoint"() {func = @main_graph} : () -> ()
}

//CHECK:  %{{[0-9]+}} = "onnx.Conv"(%{{.*}}, %{{.*}}, %{{.*}}) {auto_pad = "NOTSET", dilations = [1, 1], group = 1 : si64, kernel_shape = [3, 3], onnx_node_name = "Conv_9", pads = [1, 1, 1, 1], strides = [2, 2]} : (tensor<1x3x180x320xf32>, tensor<16x3x3x3xf32>, tensor<16xf32>) -> tensor<1x16x90x160xf32>
//CHECK-NEXT:  %{{[0-9]+}} = "onnx.Add"(%{{.*}}, %{{.*}}) {onnx_node_name = "Add_11"} : (tensor<1x16x90x160xf32>, tensor<f32>) -> tensor<1x16x90x160xf32>
